openapi: 3.0.3
info:
  title: Just Girly Things – API
  description: |-
    **Курсова задача – Домашна работа №1**
    Пълна документация на услугите за малка социална мрежа.

    Всички защитени крайни точки използват JWT (Bearer) авторизация.
  version: "1.1.0"
  contact:
    name: Екип Just Girly Things
servers:
  - url: https://localhost:64706
    description: Локален dev сървър (.NET 6 Kestrel)

# ---------------------------------------------------------------------------
# TAGS
# ---------------------------------------------------------------------------
tags:
  - name: Authentication
    description: Регистрация и вписване
  - name: Feed
    description: Емисия и постове
  - name: Replies
    description: Отговори под пост
  - name: Users
    description: Управление на потребители (само за администратори)

# ---------------------------------------------------------------------------
# COMPONENTS
# ---------------------------------------------------------------------------
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        Използвайте JWT токена, върнат при `/api/Auth/login` или `/api/Auth/register`,
        като стойност на `Authorization: Bearer <token>`.

  parameters:
    PostId:
      name: postId
      in: path
      required: true
      schema: { type: integer, minimum: 1 }
      description: Идентификатор на пост
    ReplyId:
      name: replyId
      in: path
      required: true
      schema: { type: integer, minimum: 1 }
      description: Идентификатор на отговор
    UserId:
      name: userId
      in: path
      required: true
      schema: { type: integer, minimum: 1 }
      description: Идентификатор на потребител

  schemas:
    # ------------ AUTH -------------
    RegisterRequest:
      type: object
      required: [username, password, email]
      properties:
        username: { type: string, minLength: 3, maxLength: 32 }
        password: { type: string, minLength: 4, maxLength: 64 }
        email: { type: string, format: email }

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }

    LoginResponse:
      type: object
      properties:
        token: { type: string, description: JWT Bearer токен }
        username: { type: string }
        isAdmin: { type: boolean }
        userId: { type: integer }

    # ------------- FEED & REPLIES -------------
    CreatePostRequest:
      type: object
      required: [title, content]
      properties:
        title: { type: string, minLength: 1, maxLength: 120 }
        content: { type: string, minLength: 1, maxLength: 5000 }

    UpdatePostRequest:
      allOf:
        - $ref: "#/components/schemas/CreatePostRequest"

    CreateReplyRequest:
      type: object
      required: [content]
      properties:
        content: { type: string, minLength: 1, maxLength: 2000 }

    UpdateReplyRequest:
      allOf:
        - $ref: "#/components/schemas/CreateReplyRequest"

    ReplyDto:
      type: object
      properties:
        id: { type: integer }
        postId: { type: integer }
        userId: { type: integer }
        userUsername: { type: string }
        content: { type: string }
        createdAt: { type: string, format: date-time }

    PostDto:
      type: object
      properties:
        id: { type: integer }
        userId: { type: integer }
        userUsername: { type: string }
        title: { type: string }
        content: { type: string }
        createdAt: { type: string, format: date-time }
        likes: { type: integer }
        isLikedByMe: { type: boolean }
        replies:
          type: array
          items: { $ref: "#/components/schemas/ReplyDto" }

    # ------------- USERS -------------
    UpdateUserRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 4, maxLength: 64 }
        isAdmin: { type: boolean }

    UserDto:
      type: object
      properties:
        id: { type: integer }
        username: { type: string }
        email: { type: string, format: email }
        isAdmin: { type: boolean }
        createdAt: { type: string, format: date-time }

    # ------------- ERROR -------------
    Error:
      type: object
      properties:
        message: { type: string }

# ---------------------------------------------------------------------------
# PATHS
# ---------------------------------------------------------------------------
paths:
  # ---------- AUTHENTICATION ----------
  /api/Auth/register:
    post:
      tags: [Authentication]
      summary: Регистриране на нов потребител
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RegisterRequest" }
      responses:
        "201":
          description: Успешна регистрация – връща JWT и данни на потребителя
          content:
            application/json:
              schema: { $ref: "#/components/schemas/LoginResponse" }
        "409":
          description: Потребителското име е заето
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /api/Auth/login:
    post:
      tags: [Authentication]
      summary: Вписване
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginRequest" }
      responses:
        "200":
          description: Успешно вписване
          content:
            application/json:
              schema: { $ref: "#/components/schemas/LoginResponse" }
        "401":
          description: Невалидни данни за вход
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # ---------- FEED ----------
  /api/Feed:
    get:
      tags: [Feed]
      summary: Връща последните 20 поста (с брой лайкове и отговори)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/PostDto" }
    post:
      tags: [Feed]
      summary: Създаване на нов пост
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreatePostRequest" }
      responses:
        "201": { description: Създадено }
        "400":
          description: Липсващо или невалидно съдържание
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /api/Feed/{postId}:
    parameters:
      - $ref: "#/components/parameters/PostId"
    get:
      tags: [Feed]
      summary: Връща детайлите за пост
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostDto" }
        "404": { description: Постът не е намерен }
    put:
      tags: [Feed]
      summary: Актуализиране на пост (собственик или админ)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdatePostRequest" }
      responses:
        "204": { description: Актуализирано }
        "403": { description: Без право за промяна }
        "404": { description: Постът не е намерен }
    delete:
      tags: [Feed]
      summary: Изтриване на пост (собственик или админ)
      security:
        - BearerAuth: []
      responses:
        "204": { description: Изтрито }
        "403": { description: Без право за триене }
        "404": { description: Постът не е намерен }

  /api/Feed/{postId}/like:
    parameters:
      - $ref: "#/components/parameters/PostId"
    post:
      tags: [Feed]
      summary: Харесване на пост
      security:
        - BearerAuth: []
      responses:
        "204": { description: Харесано }
        "400": { description: Вече е харесано }
    delete:
      tags: [Feed]
      summary: Премахване на харесване
      security:
        - BearerAuth: []
      responses:
        "204": { description: Отхаресано }
        "404": { description: Няма такъв лайк }

  /api/Feed/{postId}/reply:
    parameters:
      - $ref: "#/components/parameters/PostId"
    post:
      tags: [Replies]
      summary: Създаване на отговор
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateReplyRequest" }
      responses:
        "201": { description: Отговорът е създаден }
        "400": { description: Липсващо съдържание }

  # ---------- REPLIES ----------
  /api/Replies/{replyId}:
    parameters:
      - $ref: "#/components/parameters/ReplyId"
    put:
      tags: [Replies]
      summary: Актуализиране на отговор (собственик или админ)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateReplyRequest" }
      responses:
        "204": { description: Актуализирано }
        "403": { description: Без право за промяна }
        "404": { description: Не е намерено }
    delete:
      tags: [Replies]
      summary: Изтриване на отговор (собственик или админ)
      security:
        - BearerAuth: []
      responses:
        "204": { description: Изтрито }
        "403": { description: Без право за триене }
        "404": { description: Не е намерено }

  # ---------- USERS (ADMIN) ----------
  /api/Users:
    get:
      tags: [Users]
      summary: Връща списък с всички потребители (админ)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/UserDto" }
        "403": { description: Не сте администратор }

  /api/Users/{userId}:
    parameters:
      - $ref: "#/components/parameters/UserId"
    put:
      tags: [Users]
      summary: Актуализиране на потребител (админ)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateUserRequest" }
      responses:
        "204": { description: Актуализирано }
        "403": { description: Не сте администратор }
        "404": { description: Потребителят не е намерен }
    delete:
      tags: [Users]
      summary: Изтриване на потребител (админ)
      security:
        - BearerAuth: []
      responses:
        "204": { description: Изтрито }
        "403": { description: Не сте администратор }
        "404": { description: Потребителят не е намерен }
