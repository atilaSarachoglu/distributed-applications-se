openapi: 3.0.0
info:
  title: JustGirlyThings API
  version: "1.0.0"
  description: |
    REST-style backend that powers the **JustGirlyThings** social feed.
    JWT Bearer authentication is required for all mutating operations;
    read-only endpoints are public unless otherwise noted.
servers:
  - url: http://localhost:64706

paths:
  /api/Auth/register:
    post:
      summary: Register a new account
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: Account created – returns an auth token and user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "409": { description: Username already taken }
        "422": { description: Validation errors }

  /api/Auth/login:
    post:
      summary: Log in and receive a JWT token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Logged-in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401": { description: Invalid credentials }
        "422": { description: Validation errors }

  /api/Feed:
    get:
      summary: Retrieve the public feed
      tags: [Feed]
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: pageSize
          in: query
          schema: { type: integer, default: 20 }
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [createdAt, likes]
            default: createdAt
        - name: searchTitle
          in: query
          schema: { type: string }
        - name: searchContent
          in: query
          schema: { type: string }
      responses:
        "200":
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDto"

    post:
      summary: Create a post
      tags: [Feed]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostRequest"
      responses:
        "200": { description: Post created }
        "401": { description: Unauthorized }
        "422": { description: Validation errors }

  /api/Feed/{id}/like:
    parameters:
      - $ref: "#/components/parameters/Id"
    post:
      summary: Like a post
      tags: [Feed]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Post liked }
        "400": { description: Already liked }
        "401": { description: Unauthorized }
    delete:
      summary: Unlike a post
      tags: [Feed]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Post un-liked }
        "401": { description: Unauthorized }

  /api/Feed/{id}/reply:
    parameters:
      - $ref: "#/components/parameters/Id"
    post:
      summary: Reply to a post
      tags: [Feed]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReplyRequest"
      responses:
        "200": { description: Reply added }
        "401": { description: Unauthorized }
        "422": { description: Validation errors }

  /api/Feed/{id}:
    parameters:
      - $ref: "#/components/parameters/Id"
    put:
      summary: Update a post
      tags: [Feed]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostRequest"
      responses:
        "204": { description: Updated – no content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Post not found }
        "422": { description: Validation errors }
    delete:
      summary: Delete a post
      tags: [Feed]
      security: [{ bearerAuth: [] }]
      responses:
        "204": { description: Deleted – no content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Post not found }

  /api/Replies/{id}:
    parameters:
      - $ref: "#/components/parameters/Id"
    put:
      summary: Update a reply
      tags: [Replies]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReplyRequest"
      responses:
        "204": { description: Updated – no content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Reply not found }
        "422": { description: Validation errors }
    delete:
      summary: Delete a reply
      tags: [Replies]
      security: [{ bearerAuth: [] }]
      responses:
        "204": { description: Deleted – no content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: Reply not found }

  /api/Users:
    get:
      summary: List users (admin only)
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: username
          in: query
          schema: { type: string }
        - name: email
          in: query
          schema: { type: string }
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: pageSize
          in: query
          schema: { type: integer, default: 10 }
      responses:
        "200":
          description: List of users
          headers:
            X-Total-Count:
              description: Total records available
              schema: { type: integer }
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
        "401": { description: Unauthorized }
        "403": { description: Forbidden }

    put:
      summary: Update a user
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: query
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "204": { description: Updated – no content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: User not found }
        "422": { description: Validation errors }

    delete:
      summary: Delete a user
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: query
          required: true
          schema: { type: integer }
      responses:
        "204": { description: Deleted – no content }
        "401": { description: Unauthorized }
        "403": { description: Forbidden }
        "404": { description: User not found }

components:
  parameters:
    Id:
      name: id
      in: path
      required: true
      schema: { type: integer }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, maxLength: 50 }
        password: { type: string, maxLength: 64 }

    RegisterRequest:
      type: object
      required: [username, password, email]
      properties:
        username: { type: string, maxLength: 50 }
        password: { type: string, maxLength: 64 }
        email: { type: string, format: email, maxLength: 255 }

    LoginResponse:
      type: object
      properties:
        token: { type: string }
        username: { type: string }
        isAdmin: { type: boolean }
        userId: { type: integer }

    PostDto:
      type: object
      properties:
        id: { type: integer }
        userId: { type: integer }
        title: { type: string }
        userUsername: { type: string }
        content: { type: string }
        createdAt: { type: string, format: date-time }
        likes: { type: integer }
        isLikedByMe: { type: boolean }
        replies:
          type: array
          items: { $ref: "#/components/schemas/ReplyDto" }
        canEdit: { type: boolean }

    ReplyDto:
      type: object
      properties:
        id: { type: integer }
        postId: { type: integer }
        userId: { type: integer }
        userUsername: { type: string }
        content: { type: string }
        createdAt: { type: string, format: date-time }
        canEdit: { type: boolean }

    CreatePostRequest:
      type: object
      required: [title, content]
      properties:
        title: { type: string, maxLength: 15 }
        content: { type: string, maxLength: 1000 }

    CreateReplyRequest:
      type: object
      required: [postId, content]
      properties:
        postId: { type: integer }
        content: { type: string, maxLength: 1000 }

    UpdatePostRequest:
      type: object
      required: [content]
      properties:
        content: { type: string, maxLength: 1000 }

    UpdateReplyRequest:
      type: object
      required: [content]
      properties:
        content: { type: string, maxLength: 600 }

    UpdateUserRequest:
      type: object
      required: [username, isAdmin]
      properties:
        username: { type: string, maxLength: 60 }
        email:
          type: string
          format: email
          maxLength: 100
          nullable: true
        password:
          type: string
          maxLength: 100
          nullable: true
        isAdmin: { type: boolean }

    UserDto:
      type: object
      properties:
        id: { type: integer }
        username: { type: string }
        email:
          type: string
          format: email
          nullable: true
        isAdmin: { type: boolean }
