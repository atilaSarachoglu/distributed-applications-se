@page
@{
    ViewData["Title"] = "Home page";
}

<!-- ============ GUEST VIEW ============ -->
<div id="guestView" style="display:none">
    <p class="system-text">
        Welcome to Just Girly Things! To obtain access to our website,
        please create an account or log into an existing one from the header tab.
    </p>
</div>

<!-- ============ AUTHENTICATED VIEW ============ -->
<div id="userView" style="display:none">
    <!-- welcome -->
    <p class="system-text" id="welcome-back-text"></p>

    <!-- create-post -->
    <form class="create-post" id="createPostForm">
        <div class="grid" id="create-post-form">
            <div class="row">
                <h2 class="system-text">Create new post.</h2>

                <p class="system-text">Title:</p>
                <div><input id="newPostTitle" class="text-box single-line" /></div>

                <p class="system-text">Body:</p>
                <div id="new-post-body-box">
                    <textarea id="newPostBody"></textarea>
                </div>

                <input type="submit" value="Create Post" />
                <span id="createPostErr" class="field-validation-error"></span>
            </div>
        </div>
    </form>

    <!-- search form -->
    <div class="search-form mb-4">
        <form id="searchForm" class="row g-3">
            <div class="col-md-5">
                <input type="text" class="form-control" id="searchTitle" placeholder="Search by title...">
            </div>
            <div class="col-md-5">
                <input type="text" class="form-control" id="searchContent" placeholder="Search by content...">
            </div>
            <div class="col-md-1">
                <button type="submit" class="btn btn-primary w-100">Search</button>
            </div>
            <div class="col-md-1">
                <button type="button" id="resetSearch" class="btn btn-secondary w-100">Reset</button>
            </div>
        </form>
    </div>

    <!-- feed -->
    <div class="posts" id="postsContainer"></div>
    <div id="pagination" class="pagination-container"></div>
</div>

@section Scripts {
    <script src="~/js/site.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            /********** CONFIG **********/
            const apiBase = 'https://localhost:64706/api';   // API base URL
            const jwt = sessionStorage.getItem('jwt');
            const username = sessionStorage.getItem('user');
            const headers = { 'Content-Type': 'application/json', 'Authorization': `Bearer ${jwt}` };
            const qs = sel => document.querySelector(sel);

            /********** PAGER STATE **********/
            let curPage = 1;
            let pageSize = 10;
            let totalPosts = 0;

            /********** AUTH GATE **********/
            if (!jwt) {
                qs('#guestView').style.display = 'block';
            } else {
                qs('#userView').style.display = 'block';
                qs('#welcome-back-text').textContent = `Welcome back, @@${username}.`;
                loadFeed();
            }

            /********** LOAD FEED **********/
            async function loadFeed(searchTitle = '', searchContent = '') {
                try {
                    console.log('JWT Token:', jwt);
                    console.log('Headers:', headers);
                    const queryParams = new URLSearchParams();
                    queryParams.append('page', curPage);
                    queryParams.append('pageSize', pageSize);
                    queryParams.append('orderBy', 'createdAt');
                    if (searchTitle) queryParams.append('searchTitle', searchTitle);
                    if (searchContent) queryParams.append('searchContent', searchContent);

                    const url = `${apiBase}/Feed?${queryParams}`;
                    console.log('Request URL:', url);

                    const res = await fetch(url, { headers });
                    console.log('Response status:', res.status);
                    const totalCountHeader = res.headers.get('X-Total-Count');
                    console.log('Total posts from header:', totalCountHeader);

                    totalPosts = parseInt(totalCountHeader || '0', 10);
                    console.log('Parsed total posts:', totalPosts);

                    if (!res.ok) {
                        console.error('Failed to load feed:', res.status);
                        return;
                    }

                    const posts = await res.json();
                    console.log('Received posts:', posts.length);

                    const cont = qs('#postsContainer');
                    cont.innerHTML = '';
                    posts.forEach(p => cont.appendChild(renderPost(p)));
                    renderPager();
                } catch (err) {
                    console.error('Error loading feed:', err);
                    const cont = qs('#postsContainer');
                    cont.innerHTML = '<p class="error-message">Failed to load feed. Please try again later.</p>';
                }
            }

            /********** PAGER **********/
            function renderPager() {
                const paginationContainer = qs('#pagination');
                if (!paginationContainer) {
                    console.error('Pagination container not found!');
                    return;
                }

                paginationContainer.innerHTML = '';

                const totalPages = Math.ceil(totalPosts / pageSize);
                console.log('Pagination calculation:', {
                    totalPosts,
                    pageSize,
                    curPage,
                    totalPages
                });

                if (totalPages <= 1) {
                    console.log('No pagination needed - only one page');
                    return;
                }

                // Create pagination info
                const infoDiv = document.createElement('div');
                infoDiv.className = 'pagination-info';
                infoDiv.textContent = `Page ${curPage} of ${totalPages} (${totalPosts} total posts)`;
                paginationContainer.appendChild(infoDiv);

                // Create buttons container
                const buttonsDiv = document.createElement('div');
                buttonsDiv.className = 'pagination-buttons';

                // First page button
                const firstBtn = document.createElement('button');
                firstBtn.className = 'pagination-button';
                firstBtn.textContent = '«';
                firstBtn.disabled = curPage === 1;
                firstBtn.onclick = () => { curPage = 1; loadFeed(); };
                buttonsDiv.appendChild(firstBtn);

                // Previous page button
                const prevBtn = document.createElement('button');
                prevBtn.className = 'pagination-button';
                prevBtn.textContent = '‹';
                prevBtn.disabled = curPage === 1;
                prevBtn.onclick = () => { curPage--; loadFeed(); };
                buttonsDiv.appendChild(prevBtn);

                // Page numbers
                const startPage = Math.max(1, curPage - 2);
                const endPage = Math.min(totalPages, startPage + 4);

                for (let i = startPage; i <= endPage; i++) {
                    const pageBtn = document.createElement('button');
                    pageBtn.className = 'pagination-button';
                    pageBtn.textContent = i;
                    pageBtn.disabled = i === curPage;
                    pageBtn.onclick = () => { curPage = i; loadFeed(); };
                    if (i === curPage) {
                        pageBtn.style.backgroundColor = '#007bff';
                        pageBtn.style.color = 'white';
                        pageBtn.style.borderColor = '#007bff';
                    }
                    buttonsDiv.appendChild(pageBtn);
                }

                // Next page button
                const nextBtn = document.createElement('button');
                nextBtn.className = 'pagination-button';
                nextBtn.textContent = '›';
                nextBtn.disabled = curPage === totalPages;
                nextBtn.onclick = () => { curPage++; loadFeed(); };
                buttonsDiv.appendChild(nextBtn);

                // Last page button
                const lastBtn = document.createElement('button');
                lastBtn.className = 'pagination-button';
                lastBtn.textContent = '»';
                lastBtn.disabled = curPage === totalPages;
                lastBtn.onclick = () => { curPage = totalPages; loadFeed(); };
                buttonsDiv.appendChild(lastBtn);

                paginationContainer.appendChild(buttonsDiv);
            }

            /********** RENDER POST **********/
            function renderPost(post) {
                const frag = qs('#postTmpl').content.cloneNode(true);
                const me = Number(sessionStorage.getItem('userid'));
                const isAdmin = sessionStorage.getItem('admin') === 'true';
                const iOwnPost = post.userId === me;

                frag.querySelector('.postTitle').textContent = post.title;
                frag.querySelector('.postUsername').textContent = `Posted by @@${post.userUsername}`;
                frag.querySelector('.postContent').textContent = post.content;
                frag.querySelector('.postLikes').textContent = post.likes;
                frag.querySelector('.postDate').textContent = new Date(post.createdAt).toLocaleString();

                /* ---------- LIKE ---------- */
                const likeForm = frag.querySelector('.likeForm');
                const likeBtn = frag.querySelector('.likeBtn');

                if (post.isLikedByMe) {
                    likeBtn.textContent = 'Unlike';
                    likeForm.dataset.method = 'DELETE';
                } else {
                    likeBtn.textContent = 'Like';
                    likeForm.dataset.method = 'POST';
                }

                likeForm.addEventListener('submit', async e => {
                    e.preventDefault();
                    const method = likeForm.dataset.method;
                    await fetch(`${apiBase}/Feed/${post.id}/like`, { method, headers });
                    loadFeed();
                });

                /* ---------- DELETE BUTTON ---------- */
                if (isAdmin || iOwnPost) {
                    const del = document.createElement('button');
                    del.textContent = 'Delete Post';
                    del.className = 'deletePostBtn';
                    del.onclick = async () => {
                        await fetch(`${apiBase}/Feed/${post.id}`, { method: 'DELETE', headers });
                        loadFeed();
                    };
                    frag.querySelector('.post-actions-right').appendChild(del);
                }

                /* ---------- EDIT POST ---------- */
                const editPostBtn = frag.querySelector('.editPostBtn');
                const editPostForm = frag.querySelector('.editPostForm');
                const editPostInput = frag.querySelector('.editPostInput');
                const cancelEditPost = frag.querySelector('.cancelEditPost');

                if (isAdmin || iOwnPost) {
                    editPostBtn.style.display = 'inline-block';
                }

                editPostBtn?.addEventListener('click', e => {
                    e.preventDefault();
                    editPostInput.value = post.content;
                    editPostForm.style.display = 'block';
                    editPostBtn.style.display = 'none';
                });

                cancelEditPost?.addEventListener('click', () => {
                    editPostForm.style.display = 'none';
                    editPostBtn.style.display = 'inline-block';
                });

                editPostForm?.addEventListener('submit', async e => {
                    e.preventDefault();
                    const newText = editPostInput.value.trim();
                    if (!newText || newText === post.content) {
                        cancelEditPost.click();
                        return;
                    }
                    await fetch(`${apiBase}/Feed/${post.id}`, {
                        method: 'PUT',
                        headers,
                        body: JSON.stringify({ content: newText })
                    });
                    loadFeed();
                });

                /* ---------- REPLIES ---------- */
                const repliesDiv = frag.querySelector('.replies');

                post.replies.forEach(rep => {
                    const repFrag = qs('#replyTmpl').content.cloneNode(true);

                    repFrag.querySelector('.replyUsername').textContent = `Replied by @@${rep.userUsername}`;
                    repFrag.querySelector('.replyContent').textContent = rep.content;
                    repFrag.querySelector('.replyDate').textContent = new Date(rep.createdAt).toLocaleString();

                    const iOwnReply = rep.userId === me;

                    /* DELETE REPLY */
                    if (isAdmin || iOwnReply) {
                        const del = document.createElement('button');
                        del.textContent = 'Delete Reply';
                        del.className = 'deleteReplyBtn';
                        del.onclick = async () => {
                            await fetch(`${apiBase}/Replies/${rep.id}`, { method: 'DELETE', headers });
                            loadFeed();
                        };
                        repFrag.querySelector('.reply-actions').appendChild(del);
                    }

                    /* EDIT REPLY */
                    const editReplyBtn = repFrag.querySelector('.editReplyBtn');
                    const editReplyForm = repFrag.querySelector('.editReplyForm');
                    const editReplyInput = repFrag.querySelector('.editReplyInput');
                    const cancelEditReply = repFrag.querySelector('.cancelEditReply');

                    if (isAdmin || iOwnReply) {
                        editReplyBtn.style.display = 'inline-block';
                    }

                    editReplyBtn?.addEventListener('click', e => {
                        e.preventDefault();
                        editReplyInput.value = rep.content;
                        editReplyForm.style.display = 'block';
                        editReplyBtn.style.display = 'none';
                    });

                    cancelEditReply?.addEventListener('click', () => {
                        editReplyForm.style.display = 'none';
                        editReplyBtn.style.display = 'inline-block';
                    });

                    editReplyForm?.addEventListener('submit', async e => {
                        e.preventDefault();
                        const newText = editReplyInput.value.trim();
                        if (!newText || newText === rep.content) {
                            cancelEditReply.click();
                            return;
                        }
                        await fetch(`${apiBase}/Replies/${rep.id}`, {
                            method: 'PUT',
                            headers,
                            body: JSON.stringify({ content: newText })
                        });
                        loadFeed();
                    });

                    repliesDiv.appendChild(repFrag);
                });

                /* ---------- ADD REPLY ---------- */
                frag.querySelector('.replyForm').addEventListener('submit', async e => {
                    e.preventDefault();
                    const txt = e.target.querySelector('.replyInput').value.trim();
                    if (!txt) return;

                    await fetch(`${apiBase}/Feed/${post.id}/reply`, {
                        method: 'POST',
                        headers,
                        body: JSON.stringify({ content: txt })
                    });
                    loadFeed();
                });

                return frag;
            }

            /********** CREATE POST **********/
            qs('#createPostForm')?.addEventListener('submit', async e => {
                e.preventDefault();
                const title = qs('#newPostTitle').value.trim();
                const body = qs('#newPostBody').value.trim();
                if (!title || !body) {
                    qs('#createPostErr').textContent = 'Both fields required';
                    return;
                }

                const res = await fetch(`${apiBase}/Feed`, {
                    method: 'POST',
                    headers,
                    body: JSON.stringify({ title, content: body })
                });

                if (res.ok) {
                    qs('#newPostTitle').value = '';
                    qs('#newPostBody').value = '';
                    loadFeed();
                } else {
                    qs('#createPostErr').textContent = 'Error creating post';
                }
            });

            // Add search form handler
            document.getElementById('searchForm')?.addEventListener('submit', e => {
                e.preventDefault();
                const searchTitle = document.getElementById('searchTitle').value.trim();
                const searchContent = document.getElementById('searchContent').value.trim();
                curPage = 1; // Reset to first page on new search
                loadFeed(searchTitle, searchContent);
            });

            // Add reset button handler
            document.getElementById('resetSearch')?.addEventListener('click', () => {
                document.getElementById('searchTitle').value = '';
                document.getElementById('searchContent').value = '';
                curPage = 1; // Reset to first page on reset
                loadFeed();
            });

            // Initial load
            document.addEventListener('DOMContentLoaded', () => loadFeed());
        });
    </script>
}

<style>
    .pagination-container {
        margin: 20px auto;
        text-align: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        max-width: 800px;
        border: 1px solid #ddd;
    }

    .pagination-button {
        padding: 8px 16px;
        margin: 0 5px;
        border: 1px solid #ddd;
        background-color: #fff;
        color: #333;
        cursor: pointer;
        border-radius: 4px;
        transition: all 0.3s ease;
        min-width: 40px;
    }

    .pagination-button:hover:not(:disabled) {
        background-color: #f0f0f0;
        border-color: #999;
    }

    .pagination-button:disabled {
        background-color: #f5f5f5;
        color: #999;
        cursor: not-allowed;
    }

    .pagination-info {
        margin: 10px 0;
        color: #666;
        font-size: 14px;
    }

    .pagination-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        flex-wrap: wrap;
    }
</style>

<!-- ============ TEMPLATES ============ -->
<template id="postTmpl">
    <div class="post">
        <div class="post-title">
            <h2 class="postTitle"></h2>
        </div>
        <div class="post-user">
            <h4 class="postUsername"></h4>
        </div>
        <br />
        <div class="post-content">
            <p class="postContent"></p>
        </div>

        <div class="post-date">
            <p><span class="postLikes"></span> Likes.</p>
            <p>Written on: <span class="postDate"></span></p>
        </div>
        <br />

        <div class="post-actions">
            <div class="post-actions-left">
                <form class="likeForm"><button type="submit" class="likeBtn">Like</button></form>
            </div>
            <div class="post-actions-right">
                <button type="button" class="editPostBtn" style="display:none">Edit Post</button>
            </div>
        </div>

        <!-- inline post editor -->
        <form class="editPostForm" style="display:none">
            <textarea class="editPostInput"></textarea>
            <button type="submit">Save</button>
            <button type="button" class="cancelEditPost">Cancel</button>
        </form>

        <div class="replies"></div>

        <!-- Reply form -->
        <form class="replyForm">
            <textarea class="replyInput" placeholder="Write a reply..."></textarea>
            <input type="submit" value="Reply" />
        </form>
    </div>
</template>

<template id="replyTmpl">
    <div class="reply">
        <div class="reply-user">
            <h4 class="replyUsername"></h4>
        </div>
        <div class="reply-content">
            <p class="replyContent"></p>
        </div>
        <div class="reply-date">
            <p>Written on: <span class="replyDate"></span></p>
        </div>
        <div class="reply-actions">
            <button type="button" class="editReplyBtn" style="display:none">Edit Reply</button>
        </div>

        <!-- inline reply editor -->
        <form class="editReplyForm" style="display:none">
            <textarea class="editReplyInput"></textarea>
            <button type="submit">Save</button>
            <button type="button" class="cancelEditReply">Cancel</button>
        </form>
    </div>
</template>
